#include <stdlib.h>
#include <stdio.h>
#include "binary-search-tree.h"

struct bstNode* initializeBstNode() {
    struct bstNode* newNode = malloc(sizeof(struct bstNode));
    if (!newNode) {
        perror("Malloc failed.");
        exit(1);
    }
    setBstNodeDefaults(newNode);
    return newNode;
}

struct bstNode* initializeBstNodeWithKey(double key) {
    struct bstNode* newNode = initializeBstNode();
    newNode->key = key;
    return newNode;
}

void setBstNodeDefaults(struct bstNode* node) {
    node->key = 0;
    node->lnode = NULL;
    node->rnode = NULL;
    node->parent = NULL;
}

struct bstNode* constructBst(double array[], int numElements) {
    // set root node (this will be returned)
int i;
    struct bstNode* rootNode = initializeBstNodeWithKey(array[0]);

    // populate rest of the tree
    struct bstNode* newNode;
    for (i = 1; i < numElements; ++i) {
        newNode = initializeBstNodeWithKey(array[i]);
        treeInsert(rootNode, newNode);
    }
    return rootNode;
}

void treeInsert(struct bstNode* rootNode, struct bstNode* newNode) {
    struct bstNode *x = rootNode, *y = NULL;

    // find empty spot for the node
    while (x) {
        y = x; // trailing pointer
        if (newNode->key < x->key)
            x = x->lnode;
        else
            x = x->rnode;
    }

    // set new node parent
    newNode->parent = y;

    // add the node
    if (newNode->key < y->key)
        y->lnode = newNode;
    else
        y->rnode = newNode;
}

void treeDelete(struct bstNode** rootNode, struct bstNode* deleteNode) { 
    if (!deleteNode->lnode) {
        // swap with right node, works even if right
        // node is NULL
        treeTransplant(rootNode, deleteNode, deleteNode->rnode);
    }
    else if (!deleteNode->rnode) {
        // swap with left node
        treeTransplant(rootNode, deleteNode, deleteNode->lnode);
    }
    else {
        // deleteNode has left and right children
        struct bstNode* successor = treeSuccessor(deleteNode);
        if (successor != deleteNode->rnode) {
            // successor is not first right child of deleteNode,
            // so need to swap the successor and its right child node
            // (note the successor will never have left children)
            treeTransplant(rootNode, successor, successor->rnode);
            successor->rnode = deleteNode->rnode;
            successor->rnode->parent = successor;
        }
        // swap successor and deleteNode and update child node
        // pointing
        treeTransplant(rootNode, deleteNode, successor);
        successor->lnode = deleteNode->lnode;
        successor->lnode->parent = successor;
    }
    free(deleteNode);
}

void treeTransplant(struct bstNode** rootNode, struct bstNode* toRemove, struct bstNode* toTransplant) {
    if (!toRemove->parent)
        *rootNode = toTransplant;
    else if (toRemove->parent->lnode == toRemove)
        toRemove->parent->lnode = toTransplant;
    else
        toRemove->parent->rnode = toTransplant;

    if (toTransplant)
        toTransplant->parent = toRemove->parent;
}

void inOrderTreeWalk(struct bstNode* rootNode) {
    if (!rootNode)
        return;

    inOrderTreeWalk(rootNode->lnode);
    printf("%.1f, ", rootNode->key);
    inOrderTreeWalk(rootNode->rnode);
}

struct bstNode* treeSearch(struct bstNode* rootNode, double key) {
    if (!rootNode || key == rootNode->key)
            return rootNode;
    if (key < rootNode->key)
        return treeSearch(rootNode->lnode, key);
    else
        return treeSearch(rootNode->rnode, key);
}

struct bstNode* treeSearchIterative(struct bstNode* rootNode, double value) {
    while (rootNode && rootNode->key != value) {
        if (value < rootNode->key)
            rootNode = rootNode->lnode;
        else
            rootNode = rootNode->rnode;
    }
    return rootNode;
}

struct bstNode* treeMinimum(struct bstNode* rootNode) {
    if (rootNode->lnode)
        return treeMinimum(rootNode->lnode);
    return rootNode;
}

struct bstNode* treeMaximum(struct bstNode* rootNode) {
    if (rootNode->rnode)
        return treeMaximum(rootNode->rnode);
    return rootNode;
}

struct bstNode* treeSuccessor(struct bstNode* rootNode) {
    // if there is a right subtree, then the successor
    // is the min in that subtree
    if (rootNode->rnode)
        return treeMinimum(rootNode->rnode);
    // otherwise, the successor is the first left-parent
    // of the rootNode that is a left-child
    struct bstNode* parentNode = rootNode->parent;
    while (parentNode && rootNode == parentNode->rnode) {
        rootNode = parentNode;
        parentNode = parentNode->parent;
    }
    return parentNode;
}

struct bstNode* treePredecessor(struct bstNode* rootNode) {
    // if there is a left tree, then the predecessor
    // is the max in that tree
    if (rootNode->lnode)
        return treeMaximum(rootNode->lnode);
    // otherwise, the predecessor is the first right-parent
    // of the rootNode that is a right-child
    struct bstNode* parentNode = rootNode->parent;
    while (parentNode && rootNode == parentNode->lnode) {
        rootNode = parentNode;
        parentNode = parentNode->parent;
    }
    return parentNode;
}

void printBstNode(struct bstNode* node) {
    puts("------------------");
    if (node) {
    printf("Key: %.1f\n", node->key);
    if (node->parent)
        printf("Parent Key: %.1f\n", node->parent->key);
    else
        puts("Parent Key: N/A");
    if (node->lnode)
        printf("LNode Key: %.1f\n", node->lnode->key);
    else
        puts("LNode Key: N/A");
    if (node->rnode)
        printf("RNode Key: %.1f\n", node->rnode->key);
    else
        puts("RNode Key: N/A");
    }
    else {
        puts("NULL Node");
    }
    puts("------------------");
}

